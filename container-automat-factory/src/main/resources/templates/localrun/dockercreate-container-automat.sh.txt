#!/bin/sh

# Prepare environment.

§environment_commands§

# Create Docker network if necessary.

EXISTINGNETWORKID=""
for id in $(docker network ls --filter "name=container-automat-net" -q); do
    EXISTINGNETWORKID=$id
done
if [ "$EXISTINGNETWORKID" = "failed" ]; then
    EXISTINGNETWORKID=""
fi
if [ -z "$EXISTINGNETWORKID" ]; then
    echo "Docker network container-automat-net doesn't exist. Creating network ..."
    docker network create container-automat-net
else
    echo "Network container-automat-net $EXISTINGNETWORKID already exists."
fi

§MONGODB_START§
# Start or create MongoDB in Docker container.

RUNNINGMONGODBID=""
WAITINGMONGODBID=""
for id in $(docker ps --filter "name=container-automat-mongodb" -q); do
    RUNNINGMONGODBID=$id
done
for id in $(docker ps --filter "name=container-automat-mongodb" -q -a); do
    WAITINGMONGODBID=$id
done
if [ "$RUNNINGMONGODBID" = "failed" ]; then
    RUNNINGMONGODBID=""
fi
if [ "$WAITINGMONGODBID" = "failed" ]; then
    WAITINGMONGODBID=""
fi
if [ -z "$RUNNINGMONGODBID" ]; then
    echo "MongoDB container is not running."
    if [ -z "$WAITINGMONGODBID" ]; then
        echo "MongoDB container doesn't exist. Creating MongoDB container ..."
        docker run --name container-automat-mongodb --net container-automat-net -p $MONGODB_PORT:$MONGODB_PORT -d -e MONGO_INITDB_ROOT_USERNAME=$MONGODB_USER -e MONGO_INITDB_ROOT_PASSWORD=$MONGODB_PASSWORD -v container-automat-mongodb-data:/data/db mongo:6.0.15-jammy
    else
        echo "Starting MongoDB container $WAITINGMONGODBID ..."
        docker start container-automat-mongodb
    fi
else
    echo "MongoDB container $RUNNINGMONGODBID is running."
fi
§MONGODB_END§

§POSTGRESQL_START§
# Start or create PostgreSQL in Docker container.

RUNNINGPOSTGRESQLID=""
WAITINGPOSTGRESQLID=""
for id in $(docker ps --filter "name=container-automat-postgresql" -q); do
    RUNNINGPOSTGRESQLID=$id
done
for id in $(docker ps --filter "name=container-automat-postgresql" -q -a); do
    WAITINGPOSTGRESQLID=$id
done
if [ "$RUNNINGPOSTGRESQLID" = "failed" ]; then
    RUNNINGPOSTGRESQLID=""
fi
if [ "$WAITINGPOSTGRESQLID" = "failed" ]; then
    WAITINGPOSTGRESQLID=""
fi
if [ -z "$RUNNINGPOSTGRESQLID" ]; then
    echo "PostgreSQL container is not running."
    if [ -z "$WAITINGPOSTGRESQLID" ]; then
        echo "PostgreSQL container doesn't exist. Creating PostgreSQL container ..."
        docker run --name container-automat-postgresql --net container-automat-net -p $POSTGRESQL_PORT:$POSTGRESQL_PORT -d -e POSTGRES_USER=$POSTGRESQL_USER -e POSTGRES_PASSWORD=$POSTGRESQL_PASSWORD -e POSTGRES_DB=ContainerAutomatDB -v container-automat-postgresql-data:/var/lib/postgresql/data postgres:16.2-bullseye
    else
        echo "Starting PostgreSQL container $WAITINGPOSTGRESQLID ..."
        docker start container-automat-postgresql
    fi
else
    echo "PostgreSQL container $RUNNINGPOSTGRESQLID is running."
fi
§POSTGRESQL_END§

§REDIS_START§
# Start or create Redis in Docker container.

RUNNINGREDISID=""
WAITINGREDISID=""
for id in $(docker ps --filter "name=container-automat-redis" -q); do
    RUNNINGREDISID=$id
done
for id in $(docker ps --filter "name=container-automat-redis" -q -a); do
    WAITINGREDISID=$id
done
if [ "$RUNNINGREDISID" = "failed" ]; then
    RUNNINGREDISID=""
fi
if [ "$WAITINGREDISID" = "failed" ]; then
    WAITINGREDISID=""
fi
if [ -z "$RUNNINGREDISID" ]; then
    echo "Redis container is not running."
    if [ -z "$WAITINGREDISID" ]; then
        echo "Redis container doesn't exist. Creating Redis container ..."
        docker run --name container-automat-redis --net container-automat-net -p $REDIS_PORT:$REDIS_PORT -d -v container-automat-redis-data:/data redis:7.2.4-alpine redis-server --save 60 1 --loglevel warning --requirepass $REDIS_PASSWORD
    else
        echo "Starting Redis container $WAITINGREDISID ..."
        docker start container-automat-redis
    fi
else
    echo "Redis container $RUNNINGREDISID is running."
fi
§REDIS_END§

§ARTEMIS_START§
# Start or create ActiveMQ Artemis in Docker container.

RUNNINGARTEMISID=""
WAITINGARTEMISID=""
for id in $(docker ps --filter "name=container-automat-artemis" -q); do
    RUNNINGARTEMISID=$id
done
for id in $(docker ps --filter "name=container-automat-artemis" -q -a); do
    WAITINGARTEMISID=$id
done
if [ "$RUNNINGARTEMISID" = "failed" ]; then
    RUNNINGARTEMISID=""
fi
if [ "$WAITINGARTEMISID" = "failed" ]; then
    WAITINGARTEMISID=""
fi
if [ -z "$RUNNINGARTEMISID" ]; then
    echo "ActiveMQ Artemis container is not running."
    if [ -z "$WAITINGARTEMISID" ]; then
        echo "ActiveMQ Artemis container doesn't exist. Creating ActiveMQ Artemis container ..."
        docker run --name container-automat-artemis --net container-automat-net -p $ARTEMIS_PORT:$ARTEMIS_PORT -p $ARTEMIS_HTTP_PORT:$ARTEMIS_HTTP_PORT -d -h container-automat-artemis -v container-automat-artemis-data:/var/lib/artemis-instance -e ARTEMIS_USER=$ARTEMIS_USER -e ARTEMIS_PASSWORD=$ARTEMIS_PASSWORD apache/activemq-artemis:2.33.0-alpine
    else
        echo "Starting ActiveMQ Artemis container $WAITINGARTEMISID ..."
        docker start container-automat-artemis
    fi
else
    echo "ActiveMQ Artemis container $RUNNINGARTEMISID is running."
fi
§ARTEMIS_END§

§RABBITMQ_START§
# Start or create RabbitMQ in Docker container.

RUNNINGRABBITMQID=""
WAITINGRABBITMQID=""
for id in $(docker ps --filter "name=container-automat-rabbitmq" -q); do
    RUNNINGRABBITMQID=$id
done
for id in $(docker ps --filter "name=container-automat-rabbitmq" -q -a); do
    WAITINGRABBITMQID=$id
done
if [ "$RUNNINGRABBITMQID" = "failed" ]; then
    RUNNINGRABBITMQID=""
fi
if [ "$WAITINGRABBITMQID" = "failed" ]; then
    WAITINGRABBITMQID=""
fi
if [ -z "$RUNNINGRABBITMQID" ]; then
    echo "RabbitMQ container is not running."
    if [ -z "$WAITINGRABBITMQID" ]; then
        echo "RabbitMQ container doesn't exist. Creating RabbitMQ container ..."
        docker run --name container-automat-rabbitmq --net container-automat-net -p $RABBITMQ_PORT:$RABBITMQ_PORT -p $RABBITMQ_MANAGEMENT_PORT:$RABBITMQ_MANAGEMENT_PORT -d -h container-automat-rabbitmq -v container-automat-rabbitmq-data:/var/lib/rabbitmq -e RABBITMQ_DEFAULT_USER=$RABBITMQ_USER -e RABBITMQ_DEFAULT_PASS=$RABBITMQ_PASSWORD rabbitmq:3.13.1-management-alpine
    else
        echo "Starting RabbitMQ container $WAITINGRABBITMQID ..."
        docker start container-automat-rabbitmq
    fi
else
    echo "RabbitMQ container $RUNNINGRABBITMQID is running."
fi
§RABBITMQ_END§

§OPTIONAL_SERVICE_START§
# Start or create Elasticsearch in Docker container.

RUNNINGELASTICID=""
WAITINGELASTICID=""
ELASTICNEWCREATED=0
for id in $(docker ps --filter "name=container-automat-elastic" -q); do
    RUNNINGELASTICID=$id
done
for id in $(docker ps --filter "name=container-automat-elastic" -q -a); do
    WAITINGELASTICID=$id
done
if [ "$RUNNINGELASTICID" = "failed" ]; then
    RUNNINGELASTICID=""
fi
if [ "$WAITINGELASTICID" = "failed" ]; then
    WAITINGELASTICID=""
fi
if [ -z "$RUNNINGELASTICID" ]; then
    echo "Elasticsearch container is not running."
    if [ -z "$WAITINGELASTICID" ]; then
        echo "Elasticsearch container doesn't exist. Creating Elasticsearch container ..."
        docker run --name container-automat-elastic --net container-automat-net -h container-automat-elastic -p $ELASTICSEARCH_HTTP_PORT:$ELASTICSEARCH_HTTP_PORT -p $ELASTICSEARCH_TRANSPORT_PORT:$ELASTICSEARCH_TRANSPORT_PORT -d -e discovery.type=single-node -e network.host=0.0.0.0 -e node.name=container-automat-elastic -e ELASTIC_PASSWORD=$ELASTICSEARCH_PASSWORD -v container-automat-elastic-conf:/usr/share/elasticsearch/config -v container-automat-elastic-data:/usr/share/elasticsearch/data elasticsearch:8.13.0
        ELASTICNEWCREATED=1
    else
        echo "Starting Elasticsearch container $WAITINGELASTICID ..."
        docker start container-automat-elastic
    fi
else
    echo "Elasticsearch container $RUNNINGELASTICID is running."
fi

# Wait for some time unitl Elasticsearch is available.

ELASTICWAIT=0
WAITCOUNT=0
ELASTICRESULT=0
while true; do
    ELASTICRESULT=$(curl --insecure -s -u $ELASTICSEARCH_USER:$ELASTICSEARCH_PASSWORD https://localhost:$ELASTICSEARCH_HTTP_PORT | grep -c docker-cluster)
    if [ $ELASTICRESULT -eq 0 ]; then
        if [ $ELASTICWAIT -eq 40 ]; then
            echo "Unable to verify that Elasticsearch is available. Aborting ..."
            exit 1
        fi
        ELASTICWAIT=$(($ELASTICWAIT+1))
        WAITCOUNT=$((41-$ELASTICWAIT))
        echo "Elasticsearch is not yet available.  Waiting 3 seconds up to $WAITCOUNT times ..."
        sleep 3
    else
        break
    fi
done
echo "Elasticsearch is available."

# Finish Elasticsearch setup.

if [ $ELASTICNEWCREATED -eq 1 ]; then
    echo "Setting passwords for Kibana and Logstash built-in users of Elasticsearch ..."
    # Step 1: Set password for Kibana built-in user in Elasticsearch.
    docker exec -it container-automat-elastic curl -s -X POST --cacert /usr/share/elasticsearch/config/certs/http_ca.crt -u "$ELASTICSEARCH_USER:$ELASTICSEARCH_PASSWORD" -H "Content-Type: application/json" https://localhost:$ELASTICSEARCH_HTTP_PORT/_security/user/$ELASTIC_KIBANA_SYSTEM_USER/_password -d {\"password\":\"$ELASTIC_KIBANA_SYSTEM_PASSWORD\"}
    # Step 2: Set password for Logstash built-in user in Elasticsearch.
    docker exec -it container-automat-elastic curl -s -X POST --cacert /usr/share/elasticsearch/config/certs/http_ca.crt -u "$ELASTICSEARCH_USER:$ELASTICSEARCH_PASSWORD" -H "Content-Type: application/json" https://localhost:$ELASTICSEARCH_HTTP_PORT/_security/user/$ELASTIC_LOGSTASH_SYSTEM_USER/_password -d {\"password\":\"$ELASTIC_LOGSTASH_SYSTEM_PASSWORD\"}
    echo "done"
fi

# Start or create Kibana in Docker container.

RUNNINGKIBANAID=""
WAITINGKIBANAID=""
for id in $(docker ps --filter "name=container-automat-kibana" -q); do
    RUNNINGKIBANAID=$id
done
for id in $(docker ps --filter "name=container-automat-kibana" -q -a); do
    WAITINGKIBANAID=$id
done
if [ "$RUNNINGKIBANAID" = "failed" ]; then
    RUNNINGKIBANAID=""
fi
if [ "$WAITINGKIBANAID" = "failed" ]; then
    WAITINGKIBANAID=""
fi
if [ -z "$RUNNINGKIBANAID" ]; then
    echo "Kibana container is not running."
    if [ -z "$WAITINGKIBANAID" ]; then
        echo "Kibana container doesn't exist. Creating Kibana container ..."
        docker run --name container-automat-kibana --net container-automat-net -d -p $KIBANA_PORT:$KIBANA_PORT -e SERVERNAME=container-automat-kibana -e ELASTICSEARCH_HOSTS=https://container-automat-elastic:$ELASTICSEARCH_HTTP_PORT -e ELASTICSEARCH_USERNAME=$ELASTIC_KIBANA_SYSTEM_USER -e ELASTICSEARCH_PASSWORD=$ELASTIC_KIBANA_SYSTEM_PASSWORD -e ELASTICSEARCH_SSL_VERIFICATIONMODE=none kibana:8.13.0
    else
        echo "Starting Kibana container $WAITINGKIBANAID ..."
        docker start container-automat-kibana
    fi
else
    echo "Kibana container $RUNNINGKIBANAID is running."
fi

# Start or create Logstash in Docker container.

RUNNINGLOGSTASHID=""
WAITINGLOGSTASHID=""
for id in $(docker ps --filter "name=container-automat-logstash" -q); do
    RUNNINGLOGSTASHID=$id
done
for id in $(docker ps --filter "name=container-automat-logstash" -q -a); do
    WAITINGLOGSTASHID=$id
done
if [ "$RUNNINGLOGSTASHID" = "failed" ]; then
    RUNNINGLOGSTASHID=""
fi
if [ "$WAITINGLOGSTASHID" = "failed" ]; then
    WAITINGLOGSTASHID=""
fi
if [ -z "$RUNNINGLOGSTASHID" ]; then
    echo "Logstash container is not running."
    if [ -z "$WAITINGLOGSTASHID" ]; then
        echo "Logstash container doesn't exist. Initializing Docker volume with Logstash pipeline ..."
§logstash_prepare_commands§
    else
        echo "Starting Logstash container $WAITINGLOGSTASHID ..."
        docker start container-automat-logstash
    fi
else
    echo "Logstash container $RUNNINGLOGSTASHID is running."
fi
§OPTIONAL_SERVICE_END§
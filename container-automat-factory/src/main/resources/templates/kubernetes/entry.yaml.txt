apiVersion: v1
kind: Service
metadata:
  name: container-automat-entry
  labels:
    container-automat-node: entry
spec:  # A NodePort service that makes the Swagger UI available externally.
  selector:
    container-automat-node: entry  # Reference to the label of the pods used by the service.
  ports:
  - port: 9997        # Port that can be reached in the Kubernetes cluster.
    name: swagger-ui  # Unique name of the port within the service. Optional if only 1 port is defined.
    targetPort: 9997  # Port under which the application is accessible in the pod.
    nodePort: 30997   # Port that can be reached externally, i.e. from outside the cluster. If missing, a port in the NodePort service area (default 30000-32767) is selected at random.
  type: NodePort      # Ensures that the service is accessible externally, i.e. from outside the cluster.
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: container-automat-entry
  labels:
    container-automat-node: entry
spec:
  selector:
    matchLabels:
      container-automat-node: entry  # Reference to .spec.template.metadata.labels.
  replicas: 1
  strategy:
    type: Recreate  # Replace existing pods with new ones. Alternative and default is RollingUpdate.
  template:
    metadata:
      labels:
        container-automat-node: entry  # Matching .spec.selector.matchLabels.
    spec:
      restartPolicy: Always  # Always by default, alternatively OnFailure or Never.
      automountServiceAccountToken: false
      initContainers:
      - name: wait-for-services
        image: alpine:3.20.0
        command:
        - /bin/sh
        - -c
        - |
§MONGODB_START§
          until nc -z container-automat-mongodb ${MONGODB_PORT}; do echo MongoDB not yet available. Waiting 5 seconds ...; sleep 5; done;
          echo MongoDB is available.
§MONGODB_END§
§POSTGRESQL_START§
          until nc -z container-automat-postgresql ${POSTGRESQL_PORT}; do echo PostgreSQL not yet available. Waiting 5 seconds ...; sleep 5; done;
          echo PostgreSQL is available.
§POSTGRESQL_END§
§REDIS_START§
          until nc -z container-automat-redis ${REDIS_PORT}; do echo Redis not yet available. Waiting 5 seconds ...; sleep 5; done;
          echo Redis is available.
§REDIS_END§
§ARTEMIS_START§
          until nc -z container-automat-artemis ${ARTEMIS_PORT}; do echo ActiveMQ Artemis not yet available. Waiting 5 seconds ...; sleep 5; done;
          echo ActiveMQ Artemis is available.
§ARTEMIS_END§
§KAFKA_START§
          until nc -z container-automat-kafka ${KAFKA_CONTAINERPORT}; do echo Kafka not yet available. Waiting 5 seconds ...; sleep 5; done;
          echo Kafka is available.
§KAFKA_END§
§RABBITMQ_START§
          until nc -z container-automat-rabbitmq ${RABBITMQ_PORT}; do echo RabbitMQ not yet available. Waiting 5 seconds ...; sleep 5; done;
          echo RabbitMQ is available.
§RABBITMQ_END§
        env:
§storage_environment§
§messaging_environment§
      containers:
      - name: entry
        image: §containerregistry§/container-automat-entry:0.1.0
        resources:
          requests:
            cpu: "200m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
            ephemeral-storage: "512Mi"
        ports:
        - containerPort: 9997
        env:
        - name: JAVA_OPTS
          value: -Dmanagement.endpoints.enabled-by-default=false -Dmanagement.endpoint.health.enabled=true
§storage_environment§
§messaging_environment§
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 9997
          initialDelaySeconds: 30
          timeoutSeconds: 5
          periodSeconds: 13
          failureThreshold: 11
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 9997
          timeoutSeconds: 5
          periodSeconds: 23
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 9997
          timeoutSeconds: 5
          periodSeconds: 17
          failureThreshold: 3

apiVersion: v1
kind: Service
metadata:
  name: container-automat-postgresql
  labels:
    container-automat-storage: postgresql
spec:  # A headless service (type ClusterIP with clusterIP None) that makes PostgreSQL available in the Kubernetes cluster.
  selector:
    container-automat-storage: postgresql  # Reference to the label of the pods used by the service.
  ports:
  - port: 5432        # Port that the service makes available to the outside world. Note: targetPort is not used for services with clusterIP=None.
    name: postgresql  # Unique name of the port within the service. Optional if only 1 port is defined.
  type: ClusterIP     # Can be omitted as ClusterIP is the default value.
  clusterIP: None     # Results in a headless service, which is necessary for StatefulSet.
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: container-automat-postgresql
  labels:
    container-automat-storage: postgresql
spec:
  serviceName: container-automat-postgresql
  selector:
    matchLabels:
      container-automat-storage: postgresql  # Reference to .spec.template.metadata.labels.
  replicas: 1
  template:
    metadata:
      labels:
        container-automat-storage: postgresql  # Matching .spec.selector.matchLabels.
    spec:
      restartPolicy: Always  # Always by default, alternatively OnFailure or Never.
      automountServiceAccountToken: false
      containers:
      - name: postgresql
        image: postgres:16.2-bullseye
        resources:
          requests:
            cpu: "300m"
            memory: "512Mi"
          limits:
            cpu: "500m"
            memory: "1024Mi"
            ephemeral-storage: "512Mi"
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: ContainerAutomatDB
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: container-automat-env-config
              key: POSTGRESQL_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: container-automat-secrets
              key: POSTGRESQL_PASSWORD
        volumeMounts:
        - name: container-automat-postgresql-data  # Matching a .spec.volumeClaimTemplates[x].metadata.name.
          mountPath: /var/lib/postgresql/data
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          initialDelaySeconds: 30
          timeoutSeconds: 10
          periodSeconds: 17
          failureThreshold: 20
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          timeoutSeconds: 10
          periodSeconds: 23
          failureThreshold: 5
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
          timeoutSeconds: 10
          periodSeconds: 19
          failureThreshold: 3
  volumeClaimTemplates:
  - metadata:
      name: container-automat-postgresql-data  # Matching a .spec.template.containers[x].volumeMounts[x].name.
    spec:
      accessModes:
      - ReadWriteOnce  # Read/Write by 1 node (several pods if necessary). Alternatively: ReadOnlyMany, ReadWriteMany, ReadWriteOncePod.
      resources:
        requests:
          storage: 200Mi
